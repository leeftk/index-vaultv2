{"version":3,"file":"rlp-encoder.js","sourceRoot":"","sources":["../source/rlp-encoder.ts"],"names":[],"mappings":"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","sourcesContent":["// cribbed from @zoltu/rlp-encoder\nexport type RlpItem = Uint8Array | ReadonlyArray<RlpItem>\n\nexport function rlpEncode(item: RlpItem): Uint8Array {\n\tif (item instanceof Uint8Array) {\n\t\treturn rlpEncodeItem(item)\n\t} else if (Array.isArray(item)) {\n\t\treturn rlpEncodeList(item)\n\t} else {\n\t\tthrow new Error(`Can only RLP encode Uint8Arrays (items) and arrays (lists).  Please encode your item into a Uint8Array first.\\nType: ${typeof item}\\n${item}`)\n\t}\n}\n\nfunction rlpEncodeItem(data: Uint8Array): Uint8Array {\n\tif (data.length === 1 && data[0] < 0x80) return rlpEncodeTiny(data)\n\telse if (data.length <= 55) return rlpEncodeSmall(data)\n\telse return rlpEncodeLarge(data)\n}\n\nfunction rlpEncodeList(items: ReadonlyArray<RlpItem>): Uint8Array {\n\tconst encodedItems = items.map(rlpEncode)\n\tconst encodedItemsLength = encodedItems.reduce((total, item) => total + item.length, 0)\n\tif (encodedItemsLength <= 55) {\n\t\tconst result = new Uint8Array(encodedItemsLength + 1)\n\t\tresult[0] = 0xc0 + encodedItemsLength\n\t\tlet offset = 1\n\t\tfor (let encodedItem of encodedItems) {\n\t\t\tresult.set(encodedItem, offset)\n\t\t\toffset += encodedItem.length\n\t\t}\n\t\treturn result\n\t} else {\n\t\tconst lengthBytes = hexStringToUint8Array(encodedItemsLength.toString(16))\n\t\tconst result = new Uint8Array(1 + lengthBytes.length + encodedItemsLength)\n\t\tresult[0] = 0xf7 + lengthBytes.length\n\t\tresult.set(lengthBytes, 1)\n\t\tlet offset = 1 + lengthBytes.length\n\t\tfor (let encodedItem of encodedItems) {\n\t\t\tresult.set(encodedItem, offset)\n\t\t\toffset += encodedItem.length\n\t\t}\n\t\treturn result\n\t}\n}\n\nfunction rlpEncodeTiny(data: Uint8Array): Uint8Array {\n\tif (data.length > 1) throw new Error(`rlpEncodeTiny can only encode single byte values.`)\n\tif (data[0] > 0x80) throw new Error(`rlpEncodeTiny can only encode values less than 0x80`)\n\treturn data\n}\n\nfunction rlpEncodeSmall(data: Uint8Array): Uint8Array {\n\tif (data.length === 1 && data[0] < 0x80) throw new Error(`rlpEncodeSmall can only encode a value > 0x7f`)\n\tif (data.length > 55) throw new Error(`rlpEncodeSmall can only encode data that is <= 55 bytes long`)\n\tconst result = new Uint8Array(data.length + 1)\n\tresult[0] = 0x80 + data.length\n\tresult.set(data, 1)\n\treturn result\n}\n\nfunction rlpEncodeLarge(data: Uint8Array): Uint8Array {\n\tif (data.length <= 55) throw new Error(`rlpEncodeLarge can only encode data that is > 55 bytes long`)\n\tconst lengthBytes = hexStringToUint8Array(data.length.toString(16))\n\tconst result = new Uint8Array(data.length + lengthBytes.length + 1)\n\tresult[0] = 0xb7 + lengthBytes.length\n\tresult.set(lengthBytes, 1)\n\tresult.set(data, 1 + lengthBytes.length)\n\treturn result\n}\n\nfunction hexStringToUint8Array(hex: string): Uint8Array {\n\tconst match = new RegExp(`^(?:0x)?([a-fA-F0-9]*)$`).exec(hex)\n\tif (match === null) throw new Error(`Expected a hex string encoded byte array with an optional '0x' prefix but received ${hex}`)\n\tconst maybeLeadingZero = (match[1].length % 2) ? '0' : ''\n\tconst normalized = `${maybeLeadingZero}${match[1]}`\n\tconst byteLength = normalized.length / 2\n\tconst bytes = new Uint8Array(byteLength)\n\tfor (let i = 0; i < byteLength; ++i) {\n\t\tbytes[i] = (Number.parseInt(`${normalized[i*2]}${normalized[i*2+1]}`, 16))\n\t}\n\treturn bytes\n}\n\nexport function rlpDecode(data: Uint8Array): RlpItem {\n\treturn rlpDecodeItem(data).decoded\n}\n\nfunction rlpDecodeItem(data: Uint8Array): { decoded: RlpItem, consumed: number } {\n\tif (data.length === 0) throw new Error(`Cannot RLP decode a 0-length byte array.`)\n\tif (data[0] <= 0x7f) {\n\t\tconst consumed = 1\n\t\tconst decoded = data.slice(0, consumed)\n\t\treturn { decoded, consumed }\n\t} else if (data[0] <= 0xb7) {\n\t\tconst byteLength = data[0] - 0x80\n\t\tif (byteLength > data.length - 1) throw new Error(`Encoded data length (${byteLength}) is larger than remaining data (${data.length - 1}).`)\n\t\tconst consumed = 1 + byteLength\n\t\tconst decoded = data.slice(1, consumed)\n\t\tif (byteLength === 1 && decoded[0] <= 0x7f) throw new Error(`A tiny value (${decoded[0].toString(16)}) was found encoded as a small value (> 0x7f).`)\n\t\treturn { decoded, consumed }\n\t} else if (data[0] <= 0xbf) {\n\t\tconst lengthBytesLength = data[0] - 0xb7\n\t\tif (lengthBytesLength > data.length - 1) throw new Error(`Encoded length of data length (${lengthBytesLength}) is larger than the remaining data (${data.length - 1})`)\n\t\t// the conversion to Number here is lossy, but we throw on the following line in that case so \"meh\"\n\t\tconst length = decodeLength(data, 1, lengthBytesLength)\n\t\tif (length > data.length - 1 - lengthBytesLength) throw new Error(`Encoded data length (${length}) is larger than the remaining data (${data.length - 1 - lengthBytesLength})`)\n\t\tconst consumed = 1 + lengthBytesLength + length\n\t\tconst decoded = data.slice(1 + lengthBytesLength, consumed)\n\t\tif (length <= 0x37) throw new Error(`A small value (<= 55 bytes) was found encoded in a large value (> 55 bytes)`)\n\t\treturn { decoded, consumed }\n\t} else if (data[0] <= 0xf7) {\n\t\tconst length = data[0] - 0xc0\n\t\tif (length > data.length - 1) throw new Error(`Encoded array length (${length}) is larger than remaining data (${data.length - 1}).`)\n\t\tlet offset = 1\n\t\tconst results = []\n\t\twhile (offset !== length + 1) {\n\t\t\tconst {decoded, consumed} = rlpDecodeItem(data.slice(offset))\n\t\t\tresults.push(decoded)\n\t\t\toffset += consumed\n\t\t\tif (offset > length + 1) throw new Error(`Encoded array length (${length}) doesn't align with the sum of the lengths of the encoded elements (${offset})`)\n\t\t}\n\t\treturn { decoded: results, consumed: offset }\n\t} else {\n\t\tconst lengthBytesLength = data[0] - 0xf7\n\t\t// the conversion to Number here is lossy, but we throw on the following line in that case so \"meh\"\n\t\tconst length = decodeLength(data, 1, lengthBytesLength)\n\t\tif (length > data.length - 1 - lengthBytesLength) throw new Error(`Encoded array length (${length}) is larger than the remaining data (${data.length - 1 - lengthBytesLength})`)\n\t\tlet offset = 1 + lengthBytesLength\n\t\tconst results = []\n\t\twhile (offset !== length + 1 + lengthBytesLength) {\n\t\t\tconst {decoded, consumed} = rlpDecodeItem(data.slice(offset))\n\t\t\tresults.push(decoded)\n\t\t\toffset += consumed\n\t\t\tif (offset > length + 1 + lengthBytesLength) throw new Error(`Encoded array length (${length}) doesn't align with the sum of the lengths of the encoded elements (${offset})`)\n\t\t}\n\t\treturn { decoded: results, consumed: offset}\n\t}\n}\n\nfunction decodeLength(data: Uint8Array, offset: number, lengthBytesLength: number): number {\n\tconst lengthBytes = data.slice(offset, offset + lengthBytesLength)\n\tlet length = 0\n\tif (lengthBytes.length >= 1) length = lengthBytes[0]\n\tif (lengthBytes.length >= 2) length = length << 8 | lengthBytes[1]\n\tif (lengthBytes.length >= 3) length = length << 8 | lengthBytes[2]\n\tif (lengthBytes.length >= 4) length = length << 8 | lengthBytes[3]\n\tif (lengthBytes.length >= 5) throw new Error(`Unable to decode RLP item or array with a length larger than 2**32`)\n\treturn length\n}\n"]}