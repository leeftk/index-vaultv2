{"version":3,"file":"utils.js","sourceRoot":"","sources":["../source/utils.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,eAAe,CAAC,KAAa;IAC5C,OAAO,KAAK,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAA;AACnD,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,SAAqB;IACtD,IAAI,CAAC,GAAG,CAAC,CAAA;IACT,OAAO,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;QACjC,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC;YAAE,MAAK;KAC7B;IACD,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;IACnD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;QACvC,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;KAC5B;IACD,OAAO,MAAM,CAAA;AACd,CAAC;AAED,MAAM,UAAU,2BAA2B,CAAC,KAAsB,EAAE,eAA4B,EAAE;IACjG,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC9B,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,GAAG,KAAK,+CAA+C,CAAC,CAAA;QAC1G,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,CAAA;KACrB;IACD,IAAI,KAAK,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,IAAI,KAAK,GAAG,EAAE;QAAE,MAAM,IAAI,KAAK,CAAC,cAAc,KAAK,WAAW,YAAY,GAAG,CAAC,wBAAwB,CAAC,CAAA;IACrJ,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,YAAY,CAAC,CAAA;IAC3C,IAAI,MAAM,CAAC,MAAM,KAAK,YAAY;QAAE,MAAM,IAAI,KAAK,CAAC,YAAY,YAAY,iBAAiB,MAAM,CAAC,MAAM,cAAc,CAAC,CAAA;IACzH,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;QACvC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,KAAK,IAAI,MAAM,CAAC,CAAC,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAA;KACzE;IACD,OAAO,MAAM,CAAA;AACd,CAAC","sourcesContent":["export function addressToString(value: bigint) {\n\treturn `0x${value.toString(16).padStart(40, '0')}`\n}\n\nexport function stripLeadingZeros(byteArray: Uint8Array): Uint8Array {\n\tlet i = 0\n\tfor (; i < byteArray.length; ++i) {\n\t\tif (byteArray[i] !== 0) break\n\t}\n\tconst result = new Uint8Array(byteArray.length - i)\n\tfor (let j = 0; j < result.length; ++j) {\n\t\tresult[j] = byteArray[i + j]\n\t}\n\treturn result\n}\n\nexport function unsignedIntegerToUint8Array(value: bigint | number, widthInBytes: 8|20|32|256 = 32) {\n\tif (typeof value === 'number') {\n\t\tif (!Number.isSafeInteger(value)) throw new Error(`${value} is not able to safely be cast into a bigint.`)\n\t\tvalue = BigInt(value)\n\t}\n\tif (value >= 2n ** (BigInt(widthInBytes) * 8n) || value < 0n) throw new Error(`Cannot fit ${value} into a ${widthInBytes * 8}-bit unsigned integer.`)\n\tconst result = new Uint8Array(widthInBytes)\n\tif (result.length !== widthInBytes) throw new Error(`Cannot a ${widthInBytes} value into a ${result.length} byte array.`)\n\tfor (let i = 0; i < result.length; ++i) {\n\t\tresult[i] = Number((value >> BigInt((widthInBytes - i) * 8 - 8)) & 0xffn)\n\t}\n\treturn result\n}\n"]}