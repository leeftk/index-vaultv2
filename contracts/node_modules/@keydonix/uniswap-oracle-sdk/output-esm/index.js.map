{"version":3,"file":"index.js","sourceRoot":"","sources":["../source/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,yBAAqB;AACpD,OAAO,EAAE,iBAAiB,EAAE,eAAe,EAAE,2BAA2B,EAAE,mBAAe;AAwCzF,MAAM,CAAC,KAAK,UAAU,QAAQ,CAAC,gBAAiC,EAAE,YAAyB,EAAE,oBAAyC,EAAE,eAAuB,EAAE,iBAAyB,EAAE,WAAmB;IAC9M,MAAM,aAAa,GAAG,MAAM,gBAAgB,CAAC,eAAe,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;IAC3E,MAAM,aAAa,GAAG,MAAM,gBAAgB,CAAC,eAAe,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAA;IAC3E,IAAI,iBAAiB,KAAK,aAAa,IAAI,iBAAiB,KAAK,aAAa;QAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,eAAe,CAAC,iBAAiB,CAAC,6DAA6D,eAAe,CAAC,eAAe,CAAC,EAAE,CAAC,CAAA;IACxP,MAAM,oBAAoB,GAAG,CAAC,iBAAiB,KAAK,aAAa,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAA;IAC7E,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC,eAAe,EAAE,CAAC,EAAE,EAAE,oBAAoB,CAAC,EAAE,WAAW,CAAC,CAAA;IAC1F,MAAM,KAAK,GAAG,MAAM,oBAAoB,CAAC,WAAW,CAAC,CAAA;IACrD,IAAI,KAAK,KAAK,IAAI;QAAE,MAAM,IAAI,KAAK,CAAC,2BAA2B,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAA;IACrF,MAAM,QAAQ,GAAG,cAAc,CAAC,KAAK,CAAC,CAAA;IACtC,MAAM,oBAAoB,GAAG,SAAS,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAA;IACzE,MAAM,gCAAgC,GAAG,SAAS,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAA;IAC9F,MAAM,6BAA6B,GAAG,SAAS,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAA;IAE3F,OAAO;QACN,KAAK,EAAE,QAAQ;QACf,oBAAoB;QACpB,gCAAgC;QAChC,6BAA6B;KAC7B,CAAA;AACF,CAAC;AAED,qIAAqI;AACrI,MAAM,CAAC,KAAK,UAAU,QAAQ,CAAC,gBAAiC,EAAE,oBAAyC,EAAE,eAAuB,EAAE,iBAAyB,EAAE,WAAmB;IACnL,KAAK,UAAU,mBAAmB,CAAC,gBAAwB,EAAE,SAAiB;QAC7E,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,eAAe,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;QAC5E,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,eAAe,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;QAC5E,MAAM,oBAAoB,GAAG,MAAM,gBAAgB,CAAC,eAAe,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;QAC1F,MAAM,YAAY,GAAG,MAAM,gBAAgB,CAAC,eAAe,EAAE,EAAE,EAAE,gBAAgB,CAAC,CAAA;QAClF,MAAM,YAAY,GAAG,MAAM,gBAAgB,CAAC,eAAe,EAAE,GAAG,EAAE,gBAAgB,CAAC,CAAA;QACnF,MAAM,kBAAkB,GAAG,oBAAoB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAA;QAChE,MAAM,QAAQ,GAAG,CAAC,oBAAoB,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,IAAE,IAAI,GAAG,EAAE,CAAC,CAAA;QACjE,MAAM,QAAQ,GAAG,oBAAoB,GAAG,CAAC,EAAE,IAAE,IAAI,GAAG,EAAE,CAAC,CAAA;QACvD,IAAI,MAAM,KAAK,iBAAiB,IAAI,MAAM,KAAK,iBAAiB;YAAE,MAAM,IAAI,KAAK,CAAC,sBAAsB,eAAe,CAAC,iBAAiB,CAAC,0CAA0C,eAAe,EAAE,CAAC,CAAA;QACtM,IAAI,QAAQ,KAAK,EAAE;YAAE,MAAM,IAAI,KAAK,CAAC,YAAY,eAAe,CAAC,eAAe,CAAC,yCAAyC,CAAC,CAAA;QAC3H,IAAI,QAAQ,KAAK,EAAE;YAAE,MAAM,IAAI,KAAK,CAAC,YAAY,eAAe,CAAC,eAAe,CAAC,yCAAyC,CAAC,CAAA;QAC3H,IAAI,kBAAkB,KAAK,EAAE;YAAE,MAAM,IAAI,KAAK,CAAC,YAAY,eAAe,CAAC,eAAe,CAAC,iEAAiE,CAAC,CAAA;QAC7J,IAAI,YAAY,KAAK,EAAE;YAAE,MAAM,IAAI,KAAK,CAAC,YAAY,eAAe,CAAC,eAAe,CAAC,8EAA8E,CAAC,CAAA;QACpK,IAAI,YAAY,KAAK,EAAE;YAAE,MAAM,IAAI,KAAK,CAAC,YAAY,eAAe,CAAC,eAAe,CAAC,8EAA8E,CAAC,CAAA;QACpK,MAAM,gBAAgB,GAAG,CAAC,MAAM,KAAK,iBAAiB,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAA;QAC7E,MAAM,kBAAkB,GAAG,CAAC,MAAM,KAAK,iBAAiB,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAA;QAC/E,MAAM,WAAW,GAAG,CAAC,MAAM,KAAK,iBAAiB,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,YAAY,CAAA;QAChF,MAAM,qCAAqC,GAAG,SAAS,GAAG,kBAAkB,CAAA;QAC5E,MAAM,QAAQ,GAAG,gBAAgB,GAAG,EAAE,IAAE,IAAI,GAAG,kBAAkB,CAAA;QACjE,OAAO,WAAW,GAAG,qCAAqC,GAAG,QAAQ,CAAA;IACtE,CAAC;IACD,MAAM,WAAW,GAAG,MAAM,oBAAoB,CAAC,QAAQ,CAAC,CAAA;IACxD,IAAI,WAAW,KAAK,IAAI;QAAE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAA;IAC3E,MAAM,aAAa,GAAG,MAAM,oBAAoB,CAAC,WAAW,CAAC,CAAA;IAC7D,IAAI,aAAa,KAAK,IAAI;QAAE,MAAM,IAAI,KAAK,CAAC,SAAS,WAAW,kBAAkB,CAAC,CAAA;IACnF,MAAM,iBAAiB,GAAG,MAAM,mBAAmB,CAAC,WAAW,CAAC,MAAM,EAAE,WAAW,CAAC,SAAS,CAAC,CAAA;IAC9F,MAAM,mBAAmB,GAAG,MAAM,mBAAmB,CAAC,WAAW,EAAE,aAAa,CAAC,SAAS,CAAC,CAAA;IAC3F,MAAM,gBAAgB,GAAG,iBAAiB,GAAG,mBAAmB,CAAA;IAChE,MAAM,SAAS,GAAG,WAAW,CAAC,SAAS,GAAG,aAAa,CAAC,SAAS,CAAA;IACjE,OAAO,gBAAgB,GAAG,SAAS,CAAA;AACpC,CAAC;AAED,SAAS,cAAc,CAAC,KAAY;IACnC,OAAO,SAAS,CAAC;QAChB,2BAA2B,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,CAAC;QACjD,2BAA2B,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,CAAC;QACjD,2BAA2B,CAAC,KAAK,CAAC,KAAK,EAAE,EAAE,CAAC;QAC5C,2BAA2B,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,CAAC;QAChD,2BAA2B,CAAC,KAAK,CAAC,gBAAgB,EAAE,EAAE,CAAC;QACvD,2BAA2B,CAAC,KAAK,CAAC,YAAY,EAAE,EAAE,CAAC;QACnD,2BAA2B,CAAC,KAAK,CAAC,SAAS,EAAE,GAAG,CAAC;QACjD,iBAAiB,CAAC,2BAA2B,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;QACpE,iBAAiB,CAAC,2BAA2B,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAChE,iBAAiB,CAAC,2BAA2B,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAClE,iBAAiB,CAAC,2BAA2B,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACjE,iBAAiB,CAAC,2BAA2B,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;QACnE,iBAAiB,CAAC,KAAK,CAAC,SAAS,CAAC;QAClC,GAAG,CAAC,KAAK,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,2BAA2B,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACxF,GAAG,CAAC,KAAK,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,2BAA2B,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;KAC3G,CAAC,CAAA;AACH,CAAC","sourcesContent":["import { rlpEncode, rlpDecode } from './rlp-encoder'\nimport { stripLeadingZeros, addressToString, unsignedIntegerToUint8Array } from './utils'\n\nexport interface Proof {\n\treadonly block: Uint8Array\n\treadonly accountProofNodesRlp: Uint8Array\n\treadonly reserveAndTimestampProofNodesRlp: Uint8Array\n\treadonly priceAccumulatorProofNodesRlp: Uint8Array\n}\n\nexport type ProofResult = {\n\treadonly accountProof: readonly Uint8Array[]\n\treadonly storageProof: readonly {\n\t\treadonly key: bigint\n\t\treadonly value: bigint\n\t\treadonly proof: readonly Uint8Array[]\n\t}[]\n}\n\nexport type Block = {\n\treadonly parentHash: bigint\n\treadonly sha3Uncles: bigint\n\treadonly miner: bigint\n\treadonly stateRoot: bigint\n\treadonly transactionsRoot: bigint\n\treadonly receiptsRoot: bigint\n\treadonly logsBloom: bigint\n\treadonly difficulty: bigint\n\treadonly number: bigint\n\treadonly gasLimit: bigint\n\treadonly gasUsed: bigint\n\treadonly timestamp: bigint\n\treadonly extraData: Uint8Array\n\treadonly mixHash: bigint | undefined\n\treadonly nonce: bigint | null\n}\n\nexport type EthGetStorageAt = (address: bigint, position: bigint, block: bigint | 'latest') => Promise<bigint>\nexport type EthGetProof = (address: bigint, positions: readonly bigint[], block: bigint) => Promise<ProofResult>\nexport type EthGetBlockByNumber = (blockNumber: bigint | 'latest') => Promise<Block | null>\n\nexport async function getProof(eth_getStorageAt: EthGetStorageAt, eth_getProof: EthGetProof, eth_getBlockByNumber: EthGetBlockByNumber, exchangeAddress: bigint, denominationToken: bigint, blockNumber: bigint): Promise<Proof> {\n\tconst token0Address = await eth_getStorageAt(exchangeAddress, 6n, 'latest')\n\tconst token1Address = await eth_getStorageAt(exchangeAddress, 7n, 'latest')\n\tif (denominationToken !== token0Address && denominationToken !== token1Address) throw new Error(`Denomination token ${addressToString(denominationToken)} is not one of the two tokens for the Uniswap exchange at ${addressToString(exchangeAddress)}`)\n\tconst priceAccumulatorSlot = (denominationToken === token0Address) ? 10n : 9n\n\tconst proof = await eth_getProof(exchangeAddress, [8n, priceAccumulatorSlot], blockNumber)\n\tconst block = await eth_getBlockByNumber(blockNumber)\n\tif (block === null) throw new Error(`Received null for block ${Number(blockNumber)}`)\n\tconst blockRlp = rlpEncodeBlock(block)\n\tconst accountProofNodesRlp = rlpEncode(proof.accountProof.map(rlpDecode))\n\tconst reserveAndTimestampProofNodesRlp = rlpEncode(proof.storageProof[0].proof.map(rlpDecode))\n\tconst priceAccumulatorProofNodesRlp = rlpEncode(proof.storageProof[1].proof.map(rlpDecode))\n\n\treturn {\n\t\tblock: blockRlp,\n\t\taccountProofNodesRlp,\n\t\treserveAndTimestampProofNodesRlp,\n\t\tpriceAccumulatorProofNodesRlp,\n\t}\n}\n\n// TODO: eth_getBlockByHash since we are making multiple calls in a row and the block at a particular number can change between calls\nexport async function getPrice(eth_getStorageAt: EthGetStorageAt, eth_getBlockByNumber: EthGetBlockByNumber, exchangeAddress: bigint, denominationToken: bigint, blockNumber: bigint): Promise<bigint> {\n\tasync function getAccumulatorValue(innerBlockNumber: bigint, timestamp: bigint) {\n\t\tconst token0 = await eth_getStorageAt(exchangeAddress, 6n, innerBlockNumber)\n\t\tconst token1 = await eth_getStorageAt(exchangeAddress, 7n, innerBlockNumber)\n\t\tconst reservesAndTimestamp = await eth_getStorageAt(exchangeAddress, 8n, innerBlockNumber)\n\t\tconst accumulator0 = await eth_getStorageAt(exchangeAddress, 9n, innerBlockNumber)\n\t\tconst accumulator1 = await eth_getStorageAt(exchangeAddress, 10n, innerBlockNumber)\n\t\tconst blockTimestampLast = reservesAndTimestamp >> (112n + 112n)\n\t\tconst reserve1 = (reservesAndTimestamp >> 112n) & (2n**112n - 1n)\n\t\tconst reserve0 = reservesAndTimestamp & (2n**112n - 1n)\n\t\tif (token0 !== denominationToken && token1 !== denominationToken) throw new Error(`Denomination token ${addressToString(denominationToken)} is not one of the tokens for exchange ${exchangeAddress}`)\n\t\tif (reserve0 === 0n) throw new Error(`Exchange ${addressToString(exchangeAddress)} does not have any reserves for token0.`)\n\t\tif (reserve1 === 0n) throw new Error(`Exchange ${addressToString(exchangeAddress)} does not have any reserves for token1.`)\n\t\tif (blockTimestampLast === 0n) throw new Error(`Exchange ${addressToString(exchangeAddress)} has not had its first accumulator update (or it is year 2106).`)\n\t\tif (accumulator0 === 0n) throw new Error(`Exchange ${addressToString(exchangeAddress)} has not had its first accumulator update (or it is 136 years since launch).`)\n\t\tif (accumulator1 === 0n) throw new Error(`Exchange ${addressToString(exchangeAddress)} has not had its first accumulator update (or it is 136 years since launch).`)\n\t\tconst numeratorReserve = (token0 === denominationToken) ? reserve0 : reserve1\n\t\tconst denominatorReserve = (token0 === denominationToken) ? reserve1 : reserve0\n\t\tconst accumulator = (token0 === denominationToken) ? accumulator1 : accumulator0\n\t\tconst timeElapsedSinceLastAccumulatorUpdate = timestamp - blockTimestampLast\n\t\tconst priceNow = numeratorReserve * 2n**112n / denominatorReserve\n\t\treturn accumulator + timeElapsedSinceLastAccumulatorUpdate * priceNow\n\t}\n\tconst latestBlock = await eth_getBlockByNumber('latest')\n\tif (latestBlock === null) throw new Error(`Block 'latest' does not exist.`)\n\tconst historicBlock = await eth_getBlockByNumber(blockNumber)\n\tif (historicBlock === null) throw new Error(`Block ${blockNumber} does not exist.`)\n\tconst latestAccumulator = await getAccumulatorValue(latestBlock.number, latestBlock.timestamp)\n\tconst historicAccumulator = await getAccumulatorValue(blockNumber, historicBlock.timestamp)\n\tconst accumulatorDelta = latestAccumulator - historicAccumulator\n\tconst timeDelta = latestBlock.timestamp - historicBlock.timestamp\n\treturn accumulatorDelta / timeDelta\n}\n\nfunction rlpEncodeBlock(block: Block) {\n\treturn rlpEncode([\n\t\tunsignedIntegerToUint8Array(block.parentHash, 32),\n\t\tunsignedIntegerToUint8Array(block.sha3Uncles, 32),\n\t\tunsignedIntegerToUint8Array(block.miner, 20),\n\t\tunsignedIntegerToUint8Array(block.stateRoot, 32),\n\t\tunsignedIntegerToUint8Array(block.transactionsRoot, 32),\n\t\tunsignedIntegerToUint8Array(block.receiptsRoot, 32),\n\t\tunsignedIntegerToUint8Array(block.logsBloom, 256),\n\t\tstripLeadingZeros(unsignedIntegerToUint8Array(block.difficulty, 32)),\n\t\tstripLeadingZeros(unsignedIntegerToUint8Array(block.number, 32)),\n\t\tstripLeadingZeros(unsignedIntegerToUint8Array(block.gasLimit, 32)),\n\t\tstripLeadingZeros(unsignedIntegerToUint8Array(block.gasUsed, 32)),\n\t\tstripLeadingZeros(unsignedIntegerToUint8Array(block.timestamp, 32)),\n\t\tstripLeadingZeros(block.extraData),\n\t\t...(block.mixHash !== undefined ? [unsignedIntegerToUint8Array(block.mixHash, 32)] : []),\n\t\t...(block.nonce !== null && block.nonce !== undefined ? [unsignedIntegerToUint8Array(block.nonce, 8)] : []),\n\t])\n}\n"]}